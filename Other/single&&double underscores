https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-single-and-double-underscore-before-an-object-name


*****************************************
************Single Underscore************
*****************************************
In a class, names with a leading underscore indicate to other programmers that 
the attribute or method is intended to be be used inside that class. However, 
privacy is not enforced in any way. Using leading underscores for functions in 
a module indicates it should not be imported from somewhere else.

From the PEP-8 style guide:

_single_leading_underscore: weak "internal use" indicator. E.g. from M import * 
does not import objects whose name starts with an underscore.


****************************************
***Double Underscore (Name Mangling)****
****************************************
From the Python docs:

Any identifier of the form __spam (at least two leading underscores, at most one 
trailing underscore) is textually replaced with _classname__spam, where classname 
is the current class name with leading underscore(s) stripped. This mangling is 
done without regard to the syntactic position of the identifier, so it can be used 
to define class-private instance and class variables, methods, variables stored in 
globals, and even variables stored in instances. private to this class on instances 
of other classes.

And a warning from the same page:

Name mangling is intended to give classes an easy way to define “private” instance 
variables and methods, without having to worry about instance variables defined by 
derived classes, or mucking with instance variables by code outside the class. Note 
that the mangling rules are designed mostly to avoid accidents; it still is possible 
for a determined soul to access or modify a variable that is considered private.

Example
>>> class MyClass():
...     def __init__(self):
...             self.__superprivate = "Hello"
...             self._semiprivate = ", world!"
...
>>> mc = MyClass()
>>> print mc.__superprivate
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: myClass instance has no attribute '__superprivate'
>>> print mc._semiprivate
, world!
>>> print mc.__dict__
{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}





Additional comments:
._variable is semiprivate and meant just for convention

.__variable is often incorrectly considered superprivate, while it's actual 
meaning is just to namemangle to prevent accidental access[1]

.__variable__ is typically reserved for builtin methods or variables

You can still access .__mangled variables if you desperately want to. The double 
underscores just namemangles, or renames, the variable to something like instance._className__mangled

Example:

class Test(object):
    def __init__(self):
        self.__a = 'a'
        self._b = 'b'

>>> t = Test()
>>> t._b
'b'
t._b is accessible because it is only hidden by convention

>>> t.__a
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Test' object has no attribute '__a'
t.__a isn't found because it no longer exists due to namemangling

>>> t._Test__a
'a'
By accessing instance._className__variable instead of just the double underscore name, you can access the hidden value
